{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "dc2af723-2293-4dd1-873a-e8ade7d2a7b1",
   "metadata": {},
   "source": [
    "## To open notebook with qiskit installed:\n",
    " - Go to anaconda powershell\n",
    " - \"conda activate qiskit-runtime\"\n",
    " - \"jupyter notebook\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a59a3983-d08c-4dc2-acd6-7c53d7c20a5a",
   "metadata": {},
   "outputs": [],
   "source": [
    "from qiskit import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5f59fa2b-50d9-480a-9832-0c7f4c352026",
   "metadata": {},
   "outputs": [],
   "source": [
    "qr = QuantumRegister(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "64160f8f-0800-49a0-9192-2aaeb8d80042",
   "metadata": {},
   "outputs": [],
   "source": [
    "cr = ClassicalRegister(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "81a88c92-e9fd-402d-8ae3-ac57d24c33d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "0df5f26a-723c-482f-8951-2398cb21572d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 179.906x284.278 with 1 Axes>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "circuit = QuantumCircuit(qr, cr)\n",
    "circuit.draw('mpl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "69ca220d-ad55-4157-8501-6d48f50d989b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 221.712x284.278 with 1 Axes>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "circuit.h(qr[0]) # hadimar gate for entanglement?\n",
    "circuit.draw('mpl')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b68654bc-bf5d-47d8-bf7f-260cc7f35e31",
   "metadata": {},
   "source": [
    "#### Hadamard Gate:\n",
    "The h gate in quantum computing takes a qbit in a definite state and puts it in an equal superposition of |1> and |0>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "b06ba86f-42f9-4672-83eb-48bba90251e8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 305.323x284.278 with 1 Axes>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "circuit.cx(qr[0], qr[1]) # controled not ## logical if (if this then that)\n",
    "circuit.draw('mpl')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa417375-e2eb-4463-b2b0-d15789ad156e",
   "metadata": {},
   "source": [
    "#### Controled not gate\n",
    "assuming the qr[1] starts in state |0> the cx measures the top qr[0] which before was in a superposition.\n",
    " - if the top is measured to be |0> then the not gate (x) is not activated\n",
    " - if the top is measured to be |1> the the not is activated and the bottom |0> goes to |1>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "ce55ca23-b789-41fd-bdb7-5dfec950f39d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 472.545x284.278 with 1 Axes>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "circuit.measure(qr, cr) # takes a measurement of the quantum bits and stores the values in the classical register\n",
    "circuit.draw('mpl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "4749e864-6829-4342-b98e-f5a3fa4535e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "from qiskit_aer import Aer\n",
    "sim = Aer.get_backend('qasm_simulator')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "9a4c973c-1516-4b71-99c4-e30a7a935e2d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Maxwell\\AppData\\Local\\Temp\\ipykernel_6652\\3369454452.py:1: DeprecationWarning: The function ``qiskit.execute_function.execute()`` is deprecated as of qiskit 0.46.0. It will be removed in the Qiskit 1.0 release. This function combines ``transpile`` and ``backend.run``, which is covered by ``Sampler`` :mod:`~qiskit.primitives`. Alternatively, you can also run :func:`.transpile` followed by ``backend.run()``.\n",
      "  results = execute(circuit, backend=sim).result()\n"
     ]
    }
   ],
   "source": [
    "results = execute(circuit, backend=sim).result() # outdated"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "83fa5dbe-e369-4189-89f6-e84933cd9c8f",
   "metadata": {},
   "outputs": [],
   "source": [
    "transpiled_circuit = transpile(circuit, backend=sim)\n",
    "results = sim.run(transpiled_circuit).result()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "6eeb251a-a6dc-4497-b69f-a823d4668e39",
   "metadata": {},
   "outputs": [],
   "source": [
    "from qiskit.tools.visualization import plot_histogram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "0a5d3ab2-050a-4157-bd3f-a85086515dae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 700x500 with 1 Axes>"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plot_histogram(results.get_counts(circuit))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "0b9459ee-3529-4d97-ad65-b0a8fe802b76",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ibmqfactory.load_account:WARNING:2024-02-02 14:01:37,288: Credentials are already in use. The existing account in the session will be replaced.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AccountProvider for IBMQ(hub='ibm-q', group='open', project='main')>"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "IBMQ.load_account()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "f77fab56-b14b-4436-a88c-3d96cb8b2c18",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<IBMBackend('simulator_statevector')>,\n",
       " <IBMBackend('simulator_stabilizer')>,\n",
       " <IBMBackend('ibm_brisbane')>,\n",
       " <IBMBackend('ibm_kyoto')>,\n",
       " <IBMBackend('ibm_osaka')>,\n",
       " <IBMBackend('ibmq_qasm_simulator')>,\n",
       " <IBMBackend('simulator_extended_stabilizer')>,\n",
       " <IBMBackend('simulator_mps')>]"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "provider = IBMQ.get_provider('ibm-q')\n",
    "from qiskit_ibm_runtime import QiskitRuntimeService\n",
    "service = QiskitRuntimeService()\n",
    "service.backends()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "3c882674-2765-474b-bfd2-21b5579066dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "qcomp = provider.get_backend('ibm_kyoto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8e9ffc76-2fd4-470b-8248-1a339d1dbcfd",
   "metadata": {},
   "outputs": [],
   "source": [
    "transpiled_circuit = transpile(circuit, backend=qcomp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a5291fa5-5c13-4ff2-b7c1-7ec9a094f490",
   "metadata": {},
   "outputs": [],
   "source": [
    "from qiskit.tools.monitor import job_monitor\n",
    "job_monitor(transpiled_circuit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "68d2c37d-0d3c-4ccb-8aa0-82f7ed2986dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "results = qcomp.run(transpiled_circuit).result()\n",
    "plot_histogram(results.get_counts(circuit))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
